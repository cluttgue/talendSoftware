<%@ jet%>

<%
boolean isEnableType1 = ("true").equals(ElementParameterParser.getValue(node, "__USE_L1__"));
List<Map<String, String>> type1Attributes = new ArrayList<Map<String, String>>();
if(isEnableType1) {
    type1Attributes = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__L1_FIELDS__");
}

boolean isEnableType2 = ("true").equals(ElementParameterParser.getValue(node, "__USE_L2__"));
List<Map<String, String>> type2Attributes = new ArrayList<Map<String, String>>();
if(isEnableType2) {
    type2Attributes = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__L2_FIELDS__");
}

List<Map<String, String>> sourceKeys = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__SOURCE_KEYS__");

boolean isEqualWithSK = false;
for(Map<String, String> sk : sourceKeys) {
    if(surrogateKey.equals(sk.get("NAME"))) {
        isEqualWithSK = true;
        break;
    }
}

boolean isFieldValueIncNull = ("true").equals(ElementParameterParser.getValue(node, "__FIELD_VALUE_INC_NULL__"));
%>
java.util.Date currentDate_<%=cid %> = new java.util.Date((Long)start_Hash.get("<%=cid %>"));
String dateString_<%=cid %> = routines.system.FormatterUtils.format_Date(currentDate_<%=cid %>, "yyyy-MM-dd HH:mm:ss");
String dateValue_<%=cid %> = "to_date('" + dateString_<%=cid %> + "', 'yyyy-mm-dd HH24:MI:SS')";
<%
String selectColumnString = "";
String columnNameString = "";
List<String> joinClause = new ArrayList<String>();
for(Map<String, String> sk : sourceKeys) {
    joinClause.add(" d." + sk.get("NAME") + " = t." + sk.get("NAME"));
}
String joinClauseString = StringUtils.join(joinClause.toArray(), " AND ");

if(isEnableType1) {
    List<String> columnNames = new ArrayList<String>();
    List<String> setColumns = new ArrayList<String>();
    List<String> whereClause = new ArrayList<String>();
    for(Map<String, String> sk : sourceKeys) {
        if(isEqualWithSK) {
            if(!sk.get("NAME").equals(surrogateKey)) {
                columnNames.add(sk.get("NAME"));
            }
        } else {
            columnNames.add(sk.get("NAME"));
        }
    }
    for(Map<String, String> type1Attribute : type1Attributes) {
        columnNames.add(type1Attribute.get("NAME"));
        setColumns.add(type1Attribute.get("NAME"));
        if(isFieldValueIncNull){
            whereClause.add("( d." + type1Attribute.get("NAME") + " is null AND t." + type1Attribute.get("NAME")+" is not null )");
        	whereClause.add("( d." + type1Attribute.get("NAME") + " is not null AND t." + type1Attribute.get("NAME")+" is null )");
        }
        whereClause.add("( d." + type1Attribute.get("NAME") + " <> t." + type1Attribute.get("NAME")+")");
    }
    selectColumnString = StringUtils.join(columnNames.toArray(), ", t.");
    columnNameString = StringUtils.join(columnNames.toArray(), ", ");
    String setColumnsString = StringUtils.join(setColumns.toArray(), ", ");
    String whereClauseString = StringUtils.join(whereClause.toArray(), " OR ");
    %>
    String updateForType1_<%=cid%> = "UPDATE " + tableName_<%=cid%> + " d SET (<%=setColumnsString%>) = (SELECT <%=setColumnsString%> FROM " + sourceTable_<%=cid%> + " t WHERE <%=joinClauseString%> AND (<%=whereClauseString%>)) WHERE EXISTS (SELECT 1 FROM " + sourceTable_<%=cid%> + " t WHERE <%=joinClauseString%> AND (<%=whereClauseString%>))";
    java.sql.Statement stmtType1Update_<%=cid%> = conn_<%=cid%>.createStatement();
    stmtType1Update_<%=cid%>.executeUpdate(updateForType1_<%=cid%>);
    stmtType1Update_<%=cid%>.close();
    <%
    if(isEnableDebug) {
        %>
        System.out.println("[<%=cid%>] type1 update sql\n" + updateForType1_<%=cid%> + "\ndone");
        <%
    }
}

String sequenceName = ElementParameterParser.getValue(node,"__SK_DB_SEQUENCE__");

String startDateField = ElementParameterParser.getValue(node,"__L2_STARTDATE_FIELD__");
String endDateField = ElementParameterParser.getValue(node,"__L2_ENDDATE_FIELD__");
boolean isEnableActive = ("true").equals(ElementParameterParser.getValue(node,"__USE_L2_ACTIVE__"));
String activeField = ElementParameterParser.getValue(node,"__L2_ACTIVE_FIELD__");
boolean isEnableVersion = ("true").equals(ElementParameterParser.getValue(node,"__USE_L2_VERSION__"));
String versionField = ElementParameterParser.getValue(node,"__L2_VERSION_FIELD__");
String l2StartDateFieldType = ElementParameterParser.getValue(node,"__L2_STARTDATE_FIELD_TYPE__");
String l2EndDateFieldType = ElementParameterParser.getValue(node,"__L2_ENDDATE_FIELD_TYPE__");
String l2StartDateFieldInputFieldName =  ElementParameterParser.getValue(node,"__INPUT_FIELD_NAME__");
String l2EndDateFieldFixedYearValue = ElementParameterParser.getValue(node,"__FIXED_YEAR_VALUE__");

if(isEnableType2) {
    List<String> whereClause = new ArrayList<String>();
    for (Map<String, String> type2Attribute : type2Attributes) {
    	if(isFieldValueIncNull){
        	whereClause.add("( d." + type2Attribute.get("NAME") + " is null AND t." + type2Attribute.get("NAME")+" is not null )");
        	whereClause.add("( d." + type2Attribute.get("NAME") + " is not null AND t." + type2Attribute.get("NAME")+" is null )");
      	}
        whereClause.add("( d." + type2Attribute.get("NAME") + " <> t." + type2Attribute.get("NAME")+")");
    }
    String whereClauseString = StringUtils.join(whereClause.toArray(), " OR ");
    %>
    String updateForType2_<%=cid %> = "UPDATE " + tableName_<%=cid%> + " d SET <%=endDateField%> = " +
    <%if ("INPUT_FIELD".equals(l2StartDateFieldType)){%>
        "(SELECT t.<%=l2StartDateFieldInputFieldName%> FROM " + sourceTable_<%=cid%> +
        " t WHERE <%=joinClauseString%>)"
    <%}else{%>
    	dateValue_<%=cid %>
    <%}%>
    + "<%if (isEnableActive) {%>, <%=activeField%> = 0<%}%> WHERE EXISTS (SELECT 1 FROM " + sourceTable_<%=cid%> +
    " t WHERE <%=joinClauseString%> AND (<%=whereClauseString%>)) AND d.<%=endDateField%> "
    +
    <%if ("NULL".equals(l2EndDateFieldType)) {
    %>
     " IS NULL";
    <%
    }else if ("FIXED_YEAR_VALUE".equals(l2EndDateFieldType)) {
    %>
     "= to_date ('" + <%=l2EndDateFieldFixedYearValue%> +"-01-01', 'yyyy-mm-dd')";
    <%
    }%>
    java.sql.Statement stmtType2Update_<%=cid%> = conn_<%=cid%>.createStatement();
    stmtType2Update_<%=cid%>.executeUpdate(updateForType2_<%=cid%>);
    stmtType2Update_<%=cid%>.close();
    <%
    if(isEnableDebug) {
        %>
        System.out.println("[<%=cid%>] type2 update sql\n" + updateForType2_<%=cid%> + "\ndone");
        <%
    }
    List<String> columnNames = new ArrayList<String>();
    for(Map<String, String> sourceKey : sourceKeys) {
        if(isEqualWithSK) {
            if(!sourceKey.get("NAME").equals(surrogateKey)) {
                columnNames.add(sourceKey.get("NAME"));
            }
        } else {
            columnNames.add(sourceKey.get("NAME"));
        }
    }
    for(Map<String, String> type1Attribute : type1Attributes) {
        columnNames.add(type1Attribute.get("NAME"));
    }
    for(Map<String, String> type2Attribute : type2Attributes) {
        columnNames.add(type2Attribute.get("NAME"));
    }
    selectColumnString = StringUtils.join(columnNames.toArray(), ", t.");
    columnNames.add(startDateField);
    columnNames.add(endDateField);
    if(isEnableActive) {
        columnNames.add(activeField);
    }
    if(isEnableVersion) {
        columnNames.add(versionField);
    }
    columnNameString = StringUtils.join(columnNames.toArray(), ", ");
    %>
    String insertForType2_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + "(<%if(("DB_SEQUENCE").equals(surrogateKeyType)) {%><%=surrogateKey%>, <%}%><%=columnNameString%>) SELECT <%if(("DB_SEQUENCE").equals(surrogateKeyType)) {%>" + <%=sequenceName%> + ".NEXTVAL, <%}%>t.<%=selectColumnString%>, "
    +
    <%if ("JOB_START_TIME".equals(l2StartDateFieldType)) { // job start time
    %>
    dateValue_<%=cid %>
    <%
    }else if ("INPUT_FIELD".equals(l2StartDateFieldType)){
    %>
    "t.<%=l2StartDateFieldInputFieldName%>"
    <%
    }%>
     +
     <%if ("NULL".equals(l2EndDateFieldType)) {
     %>
     ", NULL"
     <%
     }else if ("FIXED_YEAR_VALUE".equals(l2EndDateFieldType)) {
     %>
     ", to_date('"+<%=l2EndDateFieldFixedYearValue%>+"-01-01', 'yyyy-mm-dd')"
     <%
     }%>
     +"
     <%if(isEnableActive) {%>, 1<%}%><%if(isEnableVersion) {%>, d.<%=versionField%> + 1<%}%> FROM " +
    sourceTable_<%=cid%> + " t, " + tableName_<%=cid%> + " d WHERE <%=joinClauseString%> AND (<%=whereClauseString%>) AND d.<%=endDateField%> = "


    +
     <%if ("INPUT_FIELD".equals(l2StartDateFieldType)){%>
        "(SELECT t.<%=l2StartDateFieldInputFieldName%> FROM " + sourceTable_<%=cid%> +
        " t WHERE <%=joinClauseString%>)"
    <%}else{%>
    	dateValue_<%=cid %>
    <%}%>
    ;

    java.sql.Statement stmtType2Insert_<%=cid%> = conn_<%=cid%>.createStatement();
    stmtType2Insert_<%=cid%>.executeUpdate(insertForType2_<%=cid%>);
    stmtType2Insert_<%=cid%>.close();
    <%
    if(isEnableDebug) {
        %>
        System.out.println("[<%=cid%>] type2 new active row slq\n" + insertForType2_<%=cid %> + "\ndone");
        <%
    }
}

List<String> outerWhereClause = new ArrayList<String>();
for (Map<String, String> sk : sourceKeys) {
    outerWhereClause.add(" d." + sk.get("NAME") + " IS NULL");
}
String outerWhereClauseString = StringUtils.join(outerWhereClause.toArray(), " AND ");
%>
String insert_<%=cid%> = "INSERT INTO " + tableName_<%=cid%> + "(<%if(("DB_SEQUENCE").equals(surrogateKeyType)) {%><%=surrogateKey%>, <%}%><%=columnNameString%>) SELECT <%if(("DB_SEQUENCE").equals(surrogateKeyType)) {%>" + <%=sequenceName%> + ".NEXTVAL, <%}%>t.<%=selectColumnString%>"

<%if(isEnableType2) {%> + ", "
	+
	<%if ("JOB_START_TIME".equals(l2StartDateFieldType)) {
	%>
	 dateValue_<%=cid %>
	<%
	}else if ("INPUT_FIELD".equals(l2StartDateFieldType)){
	%>
	"t.<%=l2StartDateFieldInputFieldName%>"
	<%
	}%>
	+
	<%if ("NULL".equals(l2EndDateFieldType)) {
	%>
		", NULL"
	<%
	}else if ("FIXED_YEAR_VALUE".equals(l2EndDateFieldType)) {
	%>
		 ", to_date('"+<%=l2EndDateFieldFixedYearValue%>+"-01-01', 'yyyy-mm-dd')"
	<%
	}%>

 <%}%>

+ "<%if(isEnableType2 && isEnableActive) {%>, 1<%}%><%if(isEnableType2 && isEnableVersion) {%>, 1<%}%> FROM " +

sourceTable_<%=cid%> + " t LEFT JOIN " + tableName_<%=cid%> + " d ON <%=joinClauseString%> WHERE (<%=outerWhereClauseString%>)";

java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
stmtInsert_<%=cid%>.executeUpdate(insert_<%=cid%>);
stmtInsert_<%=cid%>.close();
<%
if(isEnableDebug) {
    %>
    System.out.println("[<%=cid%>] new rows sql\n" + insert_<%=cid %> + "\ndone");
    <%
}
%>

