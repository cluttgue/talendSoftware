<%@ jet 
imports="
	org.talend.core.model.process.INode 
	org.talend.core.model.process.ElementParameterParser 
	org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();

String cid = node.getUniqueName();
String host=ElementParameterParser.getValue(node, "__HOST__");
String port=ElementParameterParser.getValue(node, "__PORT__");
String protocol=ElementParameterParser.getValue(node, "__PROTOCOL__");
String advanced=ElementParameterParser.getValue(node, "__ADVANCEDCA__");
String storepath=ElementParameterParser.getValue(node, "__STORECA__");
String storepwd = ElementParameterParser.getValue(node, "__STORECAPWD__");
boolean useAuth = ("true").equals(ElementParameterParser.getValue(node, "__AUTHENTIFICATION__"));
boolean alwaysTrust = ("true").equals(ElementParameterParser.getValue(node, "__ALWAYS_TRUST__"));
String user =ElementParameterParser.getValue(node, "__USER__");

String referrals=ElementParameterParser.getValue(node, "__REFERRALS__");
String aliases=ElementParameterParser.getValue(node, "__ALIASES__");
String baseDN=ElementParameterParser.getValue(node, "__BASEDN__");
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
%>
java.util.Hashtable env_<%=cid%> = new java.util.Hashtable();
env_<%=cid%>.put(javax.naming.Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
env_<%=cid%>.put(javax.naming.Context.REFERRAL, "<%=referrals%>");
env_<%=cid%>.put("java.naming.ldap.derefAliases","<%=aliases%>");
env_<%=cid%>.put(javax.naming.Context.PROVIDER_URL, "ldap://"+<%=host%>+":"+<%=port%>+"/"+<%=baseDN%>);
env_<%=cid%>.put("com.sun.jndi.ldap.connect.pool", "true");
<%
if(("LDAPS").equals(protocol)){
%>
	env_<%=cid%>.put(javax.naming.Context.SECURITY_PROTOCOL, "ssl");
	env_<%=cid%>.put("java.naming.ldap.factory.socket", "talend.ssl.AdvancedSocketFactory");
<%
}
if(("LDAPS").equals(protocol) || ("TLS").equals(protocol)){
	if(("true").equals(advanced)){
		if(alwaysTrust) {
%>
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Adnanced CA trusting all certs.");
			<%}%>
			talend.ssl.AdvancedSocketFactory.alwaysTrust();
<%
		} else {
%>
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - Advanced CA using a store CA file and Keystore password.");
				log.debug("Store CA : '" + <%=storepath %> + "'.");
			<%}%>
			talend.ssl.AdvancedSocketFactory.setCertStorePath(<%=storepath%>);
<%
			if(storepwd !=null && storepwd.length() !=0 ){%>
			
                <%
                String passwordFieldName = "__STORECAPWD__";
                %>
        
                <%if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {%> 
                	final String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
                <%} else {%>
                	final String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
                <%}%>
			
				talend.ssl.AdvancedSocketFactory.setCertStorePassword(decryptedPwd_<%=cid%>);
<%
			}
		}
	}
}
%>

<%@ include file="./ldapconnect.javajet"%>

globalMap.put("conn_<%=cid%>",ctx_<%=cid%>);
globalMap.put("connBaseDN_<%=cid%>",<%=baseDN%>);